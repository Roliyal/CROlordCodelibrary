apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-go-game
  namespace: crolord
  labels:
    app: micro-go-game
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: micro-go-game
  template:
    metadata:
      labels:
        app: micro-go-game
        msePilotAutoEnable: "on"
        mseNamespace: "crolord"
        armsPilotAutoEnable: "on"
        armsPilotCreateAppName: "micro-go-game"
        msePilotCreateAppName: "micro-go-game"
        aliyun.com/app-language: golang
    spec:
      terminationGracePeriodSeconds: 60
      securityContext:            # 仅保留 fsGroup；不再 runAsNonRoot
        fsGroup: 2000

      volumes:
        - name: applog
          emptyDir:
            sizeLimit: 100Mi

      containers:
        - name: micro-go-game
          image: registry.ap-southeast-1.aliyuncs.com/micro1/micro-go-game:1.0.161
          imagePullPolicy: IfNotPresent

          securityContext:
            runAsUser: 10001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi

          ports:
            - name: http
              containerPort: 8084
              protocol: TCP

          env:
            - name: ENV_FILE
              value: "/app/.env.production"

            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

            - name: SERVICE_NAME
              value: "game-service"

            - name: SERVICE_PORT
              value: "8083"

            - name: NACOS_SERVER_IP
              value: "mse-40c332d10-nacos-ans.mse.aliyuncs.com"

            - name: NACOS_SERVER_PORT
              value: "8848"

            - name: NACOS_CONTEXT_PATH
              value: "/nacos"

            - name: NACOS_GROUP
              value: "DEFAULT_GROUP"

            - name: NACOS_CLUSTER
              value: "DEFAULT"

            - name: NACOS_CONF_DATAID
              value: "Prod_DATABASE"

            - name: NACOS_CONF_NAMESPACE
              value: ""

          volumeMounts:
            - name: applog
              mountPath: /app/log

          readinessProbe:
            httpGet:
              path: /health
              port: 8084
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3

          livenessProbe:
            httpGet:
              path: /health
              port: 8084
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 5

          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    [ -f "${ENV_FILE}" ] && . "${ENV_FILE}"
                    LOG=/app/log/lifecycle.log
                    mkdir -p "$(dirname "$LOG")" || true

                    if ! command -v curl >/dev/null 2>&1; then
                      if command -v apk >/dev/null 2>&1;  then apk add --no-cache curl; fi
                    fi

                    echo "$(date +'%F %T') postStart BEGIN" >>"$LOG"

                    curl -s -X PUT "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}&namespaceId=${NACOS_CONF_NAMESPACE}&groupName=${NACOS_GROUP}&clusterName=${NACOS_CLUSTER}&weight=100.0" >>"$LOG" 2>&1 || true

                    CONF_URL="http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/cs/configs?dataId=${NACOS_CONF_DATAID}&group=${NACOS_GROUP}"
                    [ -n "${NACOS_CONF_NAMESPACE}" ] && CONF_URL="${CONF_URL}&tenant=${NACOS_CONF_NAMESPACE}"
                    DB_CONF=$(curl -s "$CONF_URL")
                    echo "$DB_CONF" >>"$LOG"

                    DB_HOST=$(echo "$DB_CONF" | grep -E '^DB_HOST=' | cut -d= -f2-)
                    DB_PORT=$(echo "$DB_CONF" | grep -E '^DB_PORT=' | cut -d= -f2-)
                    if [ -n "$DB_HOST" ] && [ -n "$DB_PORT" ]; then
                      curl -s --connect-timeout 5 "telnet://${DB_HOST}:${DB_PORT}" >/dev/null 2>&1 \
                        && echo "$(date +'%F %T') postStart DB OK" >>"$LOG" \
                        || echo "$(date +'%F %T') postStart DB FAIL" >>"$LOG"
                    fi

                    echo "$(date +'%F %T') postStart END" >>"$LOG"
                    exit 0

            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    [ -f "${ENV_FILE}" ] && . "${ENV_FILE}"
                    LOG=/app/log/lifecycle.log
                    echo "$(date +'%F %T') preStop BEGIN" >>"$LOG"

                    curl -s -X PUT "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}&namespaceId=${NACOS_CONF_NAMESPACE}&groupName=${NACOS_GROUP}&clusterName=${NACOS_CLUSTER}&weight=0.0" >/dev/null 2>&1
                    curl -s -X PUT "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}&namespaceId=${NACOS_CONF_NAMESPACE}&groupName=${NACOS_GROUP}&clusterName=${NACOS_CLUSTER}&healthy=false" >/dev/null 2>&1
                    curl -s -X PUT "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}&namespaceId=${NACOS_CONF_NAMESPACE}&groupName=${NACOS_GROUP}&clusterName=${NACOS_CLUSTER}&enabled=false" >/dev/null 2>&1

                    sleep 10

                    curl -s -X DELETE "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}&namespaceId=${NACOS_CONF_NAMESPACE}&groupName=${NACOS_GROUP}&clusterName=${NACOS_CLUSTER}" >/dev/null 2>&1

                    echo "$(date +'%F %T') preStop END" >>"$LOG"
                    exit 0


---
apiVersion: v1
kind: Service
metadata:
  name: micro-go-game
  namespace: crolord
  labels:
    app: micro-go-game
spec:
  selector:
    app: micro-go-game
  ports:
    - protocol: TCP
      port: 8084
      targetPort: 8084
  type: ClusterIP
