apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-go-login
  namespace: crolord
  labels:
    app: micro-go-login
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: micro-go-login
  template:
    metadata:
      labels:
        app: micro-go-login
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: micro-go-login
          image: registry.ap-southeast-1.aliyuncs.com/micro1/micro-login-test-gary:1.0.145
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8083
          env:
            - name: ENV_FILE
              value: "/app/.env.production"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_NAME
              value: "micro-go-login"
            - name: SERVICE_PORT
              value: "8083"
          volumeMounts:
            - name: app-log
              mountPath: /app/log
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # 如果有 .env 文件，就加载它
                    if [ -f "${ENV_FILE}" ]; then
                      . "${ENV_FILE}"
                    fi

                    LOG=/app/log/lifecycle.log
                    mkdir -p "$(dirname "${LOG}")" || true

                    # 1. 记录开始
                    echo "$(date +'%Y-%m-%d %H:%M:%S') postStart: 注册开始 ${SERVICE_NAME} ${POD_IP}:${SERVICE_PORT}" \
                      >> "${LOG}" 2>&1

                    # 2. 调用 Nacos 注册接口
                    curl -s -X POST \
                      "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}" \
                      >> "${LOG}" 2>&1 \
                      || echo "$(date +'%Y-%m-%d %H:%M:%S') postStart: 注册接口调用失败" >> "${LOG}" 2>&1

                    # 3. 记录完成
                    echo "$(date +'%Y-%m-%d %H:%M:%S') postStart: 完成" >> "${LOG}" 2>&1

                    # 4. 确保返回 0
                    exit 0

            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # 如果有 .env 文件，就加载它
                    if [ -f "${ENV_FILE}" ]; then
                      . "${ENV_FILE}"
                    fi

                    LOG=/app/log/lifecycle.log

                    # 1. 标记不健康
                    echo "$(date +'%Y-%m-%d %H:%M:%S') preStop: 标记不健康 ${POD_IP}:${SERVICE_PORT}" \
                      >> "${LOG}" 2>&1
                    curl -s -X PUT \
                      "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}&healthy=false" \
                      >> "${LOG}" 2>&1 \
                      || echo "$(date +'%Y-%m-%d %H:%M:%S') preStop: 标记不健康失败" >> "${LOG}" 2>&1

                    # 2. 等待流量排空
                    DRAIN=15
                    echo "$(date +'%Y-%m-%d %H:%M:%S') preStop: 等待 ${DRAIN}s 流量排空" \
                      >> "${LOG}" 2>&1
                    sleep ${DRAIN} || true

                    # 3. 真正删除注册
                    echo "$(date +'%Y-%m-%d %H:%M:%S') preStop: 删除注册 ${POD_IP}:${SERVICE_PORT}" \
                      >> "${LOG}" 2>&1
                    curl -s -X DELETE \
                      "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?serviceName=${SERVICE_NAME}&ip=${POD_IP}&port=${SERVICE_PORT}" \
                      >> "${LOG}" 2>&1 \
                      || echo "$(date +'%Y-%m-%d %H:%M:%S') preStop: 删除注册失败" >> "${LOG}" 2>&1

                    # 4. 记录完成并返回
                    echo "$(date +'%Y-%m-%d %H:%M:%S') preStop: 完成" >> "${LOG}" 2>&1
                    exit 0

      volumes:
        - name: app-log
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: micro-go-login
  namespace: crolord
  labels:
    app: micro-go-login
spec:
  selector:
    app: micro-go-login
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
  type: ClusterIP
