apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-go-login
  namespace: crolord
  labels:
    app: micro-go-login
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: micro-go-login
  template:
    metadata:
      labels:
        app: micro-go-login
    spec:
      # 给 preStop + 应用优雅 shutdown 留足够时间
      terminationGracePeriodSeconds: 40

      containers:
        - name: micro-go-login
          image: registry.ap-southeast-1.aliyuncs.com/micro1/micro-login-test-gary:1.0.145
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8083

          env:
            - name: ENV_FILE
              value: "/app/.env.production"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_NAME
              value: "micro-go-login"
            - name: SERVICE_PORT
              value: "8083"

          volumeMounts:
            - name: app-log
              mountPath: /app/log

          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # 1) 加载 .env.production 中的 NACOS_* 配置
                    if [ -f "${ENV_FILE}" ]; then
                      . "${ENV_FILE}"
                    fi

                    LOG=/app/log/lifecycle.log
                    mkdir -p "$(dirname "${LOG}")" || true

                    echo "$(date +'%F %T') postStart: 开始注册 ${SERVICE_NAME} ${POD_IP}:${SERVICE_PORT}" >> "${LOG}" 2>&1

                    # 2) 登录 Nacos 拿 accessToken
                    Token=$(
                      curl -s --location \
                        --request POST "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/auth/users/login" \
                        --form "username=${NACOS_USERNAME}" \
                        --form "password=${NACOS_PASSWORD}" \
                      | awk -F'accessToken' '{print $2}' \
                      | awk -F: '{print $2}' \
                      | awk -F\" '{print $2}'
                    )

                    # 3) 注册到 Nacos（PUT 会创建或更新）
                    curl -s --location --request PUT "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?accessToken=${Token}" \
                      --form "serviceName=${SERVICE_NAME}" \
                      --form "groupName=DEFAULT_GROUP" \
                      --form "clusterName=DEFAULT" \
                      --form "namespaceId=${NACOS_NAMESPACE}" \
                      --form "ip=${POD_IP}" \
                      --form "port=${SERVICE_PORT}" \
                      --form "metadata=preserved.register.source=SPRING_CLOUD" \
                      --form "ephemeral=true" \
                      --form "weight=1" \
                      --form "enabled=true" \
                      >> "${LOG}" 2>&1 \
                      || echo "$(date +'%F %T') postStart: 注册接口调用失败" >> "${LOG}" 2>&1

                    echo "$(date +'%F %T') postStart: 完成" >> "${LOG}" 2>&1
                    exit 0

            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # 1) 加载 .env.production 中的 NACOS_* 配置
                    if [ -f "${ENV_FILE}" ]; then
                      . "${ENV_FILE}"
                    fi

                    LOG=/app/log/lifecycle.log

                    echo "$(date +'%F %T') preStop: 开始优雅下线 ${SERVICE_NAME} ${POD_IP}:${SERVICE_PORT}" >> "${LOG}" 2>&1

                    # 2) 登录 Nacos 拿 accessToken
                    Token=$(
                      curl -s --location \
                        --request POST "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/auth/users/login" \
                        --form "username=${NACOS_USERNAME}" \
                        --form "password=${NACOS_PASSWORD}" \
                      | awk -F'accessToken' '{print $2}' \
                      | awk -F: '{print $2}' \
                      | awk -F\" '{print $2}'
                    )

                    # 3) 标记实例不健康，阻断新流量
                    curl -s --location --request PUT "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?accessToken=${Token}" \
                      --form "serviceName=${SERVICE_NAME}" \
                      --form "ip=${POD_IP}" \
                      --form "port=${SERVICE_PORT}" \
                      --form "namespaceId=${NACOS_NAMESPACE}" \
                      --form "healthy=false" \
                      >> "${LOG}" 2>&1 \
                      || echo "$(date +'%F %T') preStop: 标记不健康失败" >> "${LOG}" 2>&1

                    # 4) 等待流量排空
                    echo "$(date +'%F %T') preStop: 等待 15s 流量排空" >> "${LOG}" 2>&1
                    sleep 15 || true

                    # 5) 最终从 Nacos 注销实例
                    curl -s --location --request DELETE "http://${NACOS_SERVER_IP}:${NACOS_SERVER_PORT}${NACOS_CONTEXT_PATH}/v1/ns/instance?accessToken=${Token}" \
                      --form "serviceName=${SERVICE_NAME}" \
                      --form "ip=${POD_IP}" \
                      --form "port=${SERVICE_PORT}" \
                      --form "namespaceId=${NACOS_NAMESPACE}" \
                      >> "${LOG}" 2>&1 \
                      || echo "$(date +'%F %T') preStop: 注销失败" >> "${LOG}" 2>&1

                    echo "$(date +'%F %T') preStop: 完成" >> "${LOG}" 2>&1
                    exit 0

      volumes:
        - name: app-log
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: micro-go-login
  namespace: crolord
  labels:
    app: micro-go-login
spec:
  selector:
    app: micro-go-login
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
  type: ClusterIP
