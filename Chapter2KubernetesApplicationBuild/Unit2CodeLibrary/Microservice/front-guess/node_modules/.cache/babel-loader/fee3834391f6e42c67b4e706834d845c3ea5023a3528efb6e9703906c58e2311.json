{"ast":null,"code":"import axios from \"axios\";\nconst apiClient = axios.create({\n  baseURL: \"/\",\n  withCredentials: false,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default {\n  isAuthenticated: false,\n  async authenticate(username, password) {\n    try {\n      const response = await apiClient.post(\"/login\", {\n        username,\n        password\n      });\n      if (response.data && response.data.success) {\n        this.isAuthenticated = true;\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"userID\", response.data.userID); //\n        return response.data.authToken;\n      } else {\n        this.isAuthenticated = false;\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error during authentication:\", error);\n      this.isAuthenticated = false;\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","isAuthenticated","authenticate","username","password","response","post","data","success","localStorage","setItem","authToken","userID","error","console"],"sources":["/Users/raywong/Documents/CROlordCodelibrary/Chapter2KubernetesApplicationBuild/Unit2CodeLibrary/Microservice/front-guess/src/auth-api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiClient = axios.create({\n    baseURL: \"/\",\n    withCredentials: false,\n    headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nexport default {\n    isAuthenticated: false,\n\n    async authenticate(username, password) {\n        try {\n            const response = await apiClient.post(\"/login\", { username, password });\n\n            if (response.data && response.data.success) {\n                this.isAuthenticated = true;\n                localStorage.setItem(\"authToken\", response.data.authToken);\n                localStorage.setItem(\"userID\", response.data.userID); //\n                return response.data.authToken;\n            } else {\n                this.isAuthenticated = false;\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error during authentication:\", error);\n            this.isAuthenticated = false;\n            return false;\n        }\n    },\n\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,GAAG;EACZC,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE;IACLC,MAAM,EAAE,kBAAkB;IAC1B,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,eAAe;EACXC,eAAe,EAAE,KAAK;EAEtB,MAAMC,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACnC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,QAAQ,EAAE;QAAEH,QAAQ;QAAEC;MAAS,CAAC,CAAC;MAEvE,IAAIC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACxC,IAAI,CAACP,eAAe,GAAG,IAAI;QAC3BQ,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,QAAQ,CAACE,IAAI,CAACI,SAAS,CAAC;QAC1DF,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEL,QAAQ,CAACE,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC;QACtD,OAAOP,QAAQ,CAACE,IAAI,CAACI,SAAS;MAClC,CAAC,MAAM;QACH,IAAI,CAACV,eAAe,GAAG,KAAK;QAC5B,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,IAAI,CAACZ,eAAe,GAAG,KAAK;MAC5B,OAAO,KAAK;IAChB;EACJ;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}